#!/bin/bash

# reinstall-local-language-server
# Nuclear cleanup and rebuild script for LikeC4 language server and VSCode extension
# This script performs a complete cleanup and rebuild to ensure fresh installation

set -e  # Exit on any error

echo "🧨 Starting nuclear cleanup and rebuild of LikeC4 language server..."
echo

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_step() {
    echo -e "${BLUE}📋 $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Step 1: Kill all running processes
print_step "Killing all LikeC4 language server processes..."
pkill -f "likec4" || print_warning "No likec4 processes found"
pkill -f "language-server" || print_warning "No language-server processes found"
sleep 2
print_success "Processes killed"

# Step 2: Uninstall extensions
print_step "Uninstalling LikeC4 extensions from editors..."
code --uninstall-extension likec4.likec4-vscode || print_warning "Extension not installed in VSCode"
cursor --uninstall-extension likec4.likec4-vscode || print_warning "Extension not installed in Cursor"
print_success "Extensions uninstalled"

# Step 3: Remove extension directories and caches
print_step "Removing extension directories and caches..."
rm -rf ~/.vscode/extensions/likec4.* || true
rm -rf ~/.cursor/extensions/likec4.* || true
rm -rf .turbo || true
rm -rf packages/*/dist || true
rm -rf packages/*/node_modules/.cache || true
find . -name "*.vsix" -delete || true
find . -name "*.tsbuildinfo" -delete || true
rm -rf packages/vscode/out || true
rm -rf packages/language-server/generated || true
print_success "Cache and build directories cleaned"

# Step 4: Fix npm permissions and clear caches
print_step "Clearing npm and pnpm caches..."
sudo chown -R $(id -u):$(id -g) "$HOME/.npm" 2>/dev/null || true
npm cache clean --force || true
pnpm store prune || true
print_success "Caches cleared"

# Step 5: Reinstall dependencies
print_step "Reinstalling dependencies..."
pnpm install --frozen-lockfile
print_success "Dependencies reinstalled"

# Step 6: Build language server
print_step "Building language server..."
pnpm build --filter=@likec4/language-server
print_success "Language server built"

# Step 7: Build vscode-preview (required dependency for VSCode extension)
print_step "Building vscode-preview..."
pnpm build --filter=@likec4/vscode-preview
print_success "VSCode preview built"

# Step 8: Build VSCode extension
print_step "Building VSCode extension..."
cd packages/vscode
pnpm run build
print_success "VSCode extension built"

# Step 9: Package extension
print_step "Packaging extension..."
pnpm run vsce:pack
VSIX_FILE=$(ls -t *.vsix | head -n1)
if [ -z "$VSIX_FILE" ]; then
    print_error "Failed to find packaged VSIX file"
    exit 1
fi
print_success "Extension packaged: $VSIX_FILE"

# Step 10: Install in Cursor
print_step "Installing extension in Cursor..."
cursor --install-extension "$VSIX_FILE" --force
print_success "Extension installed in Cursor"

# Step 11: Go back to root
cd ../..

# Step 12: Verify installation
print_step "Verifying installation..."
sleep 3
echo
echo "🔍 Checking for running language server processes..."
if ps aux | grep -i "language-server" | grep -v grep | grep likec4 > /dev/null; then
    print_success "Language server is running!"
    ps aux | grep -i "language-server" | grep -v grep | grep likec4
else
    print_warning "Language server not yet started (may start when you open a .c4 file)"
fi

echo
print_success "🎉 Nuclear cleanup and rebuild completed successfully!"
echo
echo -e "${BLUE}📝 Next steps:${NC}"
echo "1. Open a .c4 file in Cursor"
echo "2. Wait for the language server to start"
echo "3. Check for connectivity validation (squiggly lines)"
echo
echo -e "${YELLOW}💡 If issues persist, restart Cursor completely${NC}" 